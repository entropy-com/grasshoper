interface XiorRequestConfig<T = any> extends Omit<RequestInit, 'body'> {
    url?: string;
    headers?: Record<string, any>;
    baseURL?: string;
    params?: Record<string, any>;
    /** If no set, default depends on browsers timeout */
    timeout?: number;
    /** @deprecated use paramsSerializer */
    encode?: (params: Record<string, any>) => string;
    paramsSerializer?: (params: Record<string, any>) => string;
    /** Use encodeURIComponent, default: true */
    encodeURI?: boolean;
    /**
     * Currently only support 'json' | 'text', default: 'json';
     * Others will just return the original response
     */
    responseType?: 'json' | 'text' | 'stream' | 'document' | 'arraybuffer' | 'blob' | 'original';
    data?: any;
    /** encoded url with params */
    _url?: string;
    /** useless now, compitable axios */
    withCredentials?: boolean;
    /**
     * some API is get data, but the method is not 'GET',
     * add `isGet: true`, can let the plugins know this is also a `GET` API
     */
    isGet?: boolean;
}
type XiorInterceptorRequestConfig<T = any> = XiorRequestConfig & {
    headers: Record<string, any>;
    params: Record<string, any>;
    url: string;
    _url: string;
    method: string;
};
interface XiorResponse<T = any> {
    data: T;
    status: number;
    statusText: string;
    headers: Headers;
    response: Response;
    config: XiorInterceptorRequestConfig;
    request?: any;
}
type XiorPlugin = (adapter: (request: XiorRequestConfig) => Promise<XiorResponse>) => (request: XiorRequestConfig) => Promise<XiorResponse<any>>;

declare class XiorError extends Error {
    request?: XiorRequestConfig;
    config?: XiorRequestConfig;
    response?: XiorResponse;
    constructor(message: string, request?: XiorRequestConfig, response?: XiorResponse);
}

type ErrorRetryOptions = {
    /** retry times, default: 2 */
    retryTimes?: number;
    /**
     * Retry after milliseconds, default: 3000
     * after first time error retry, retry interval
     */
    retryInterval?: number;
    /**
     * default: true,
     * it's useful because we don't want retry when the error  because of token expired
     */
    enableRetry?: boolean | ((config: XiorRequestConfig, error: XiorError) => boolean);
};
/** @ts-ignore */
declare module 'xior' {
    interface XiorRequestConfig extends ErrorRetryOptions {
    }
}
declare function xiorErrorRetryPlugin(options?: ErrorRetryOptions): XiorPlugin;

export { type ErrorRetryOptions, xiorErrorRetryPlugin as default };
